#!/usr/bin/env bash

# You can call this script like this:
# $ ./volumeControl.sh up
# $ ./volumeControl.sh down
# $ ./volumeControl.sh mute

# Script modified from these wonderful people:
# https://github.com/dastorm/volume-notification-dunst/blob/master/volume.sh
# https://gist.github.com/sebastiencs/5d7227f388d93374cebdf72e783fbd6a

set -x

step=5

function get_volume {
  pactl get-sink-volume @DEFAULT_SINK@ | grep -oP '\d+%' | head -1 | tr -d '%'
}

function is_mute {
  pactl get-sink-mute @DEFAULT_SINK@ | grep -q 'yes'
}

function send_notification {
  if is_mute ; then
      echo 0 >"$XDG_RUNTIME_DIR/wobpipe"
  else
      echo "$(get_volume)" >"$XDG_RUNTIME_DIR/wobpipe"
  fi
}

case $1 in
  up)
    pactl set-sink-mute @DEFAULT_SINK@ off
    if (( $(get_volume) >= 100-$step )) && (( $(get_volume) < 100 )); then
      # snap to 100%
      pactl set-sink-volume @DEFAULT_SINK@ 100%
    elif (( $(get_volume) >= 150-$step )) && (( $(get_volume) < 150 )); then
      # snap to 150%
      pactl set-sink-volume @DEFAULT_SINK@ 150%
    elif (( $(get_volume) < 150 )); then
      pactl set-sink-volume @DEFAULT_SINK@ +$step%
    fi
    send_notification
    ;;
  down)
    pactl set-sink-mute @DEFAULT_SINK@ off
    if (( $(get_volume) <= 100+$step )) && (( $(get_volume) > 100 )); then
      # snap to 100%
      pactl set-sink-volume @DEFAULT_SINK@ 100%
    else
      pactl set-sink-volume @DEFAULT_SINK@ -$step%
    fi
    send_notification
    ;;
  toggle-mute)
    pactl set-sink-mute @DEFAULT_SINK@ toggle
    send_notification
    ;;
esac